// <auto-generated/>

//------------------------------------------------------------------------------------------------
//      This file has been programatically generated; DON´T EDIT!
//------------------------------------------------------------------------------------------------

#pragma warning disable SA1001
#pragma warning disable SA1027
#pragma warning disable SA1028
#pragma warning disable SA1121
#pragma warning disable SA1205
#pragma warning disable SA1309
#pragma warning disable SA1402
#pragma warning disable SA1505
#pragma warning disable SA1507
#pragma warning disable SA1508
#pragma warning disable SA1652

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Numerics;
using System.Text.Json;

namespace SharpGLTF.Schema2
{
	using Collections;

	/// <summary>
	/// Element type represented by each property value. `VECN` is a vector of `N` numeric components. `MATN` is an `N ⨉ N` matrix of numeric components stored in column-major order. `ARRAY` is fixed-length when `componentCount` is defined, and is variable-length otherwise.
	/// </summary>
	public enum ClassPropertyType
	{
		SINGLE,
		VEC2,
		VEC3,
		VEC4,
		MAT2,
		MAT3,
		MAT4,
		ARRAY,
	}


	/// <summary>
	/// Data type of an element's components. When `type` is `SINGLE`, then `componentType` is also the data type of the element. When `componentType` is `ENUM`, `enumType` is required.
	/// </summary>
	public enum ElementComponentType
	{
		INT8,
		UINT8,
		INT16,
		UINT16,
		INT32,
		UINT32,
		INT64,
		UINT64,
		FLOAT32,
		FLOAT64,
		BOOLEAN,
		STRING,
		ENUM,
	}


	///// <summary>
	///// The type of the integer enum value.
	///// </summary>
	//public enum IntegerType
	//{
	//	INT8,
	//	UINT8,
	//	INT16,
	//	UINT16,
	//	INT32,
	//	UINT32,
	//	INT64,
	//	UINT64,
	//}


	/// <summary>
	/// The type of values in `stringOffsetBufferView`.
	/// </summary>
	public enum OffsetBufferViewType
	{
		UINT8,
		UINT16,
		UINT32,
		UINT64,
	}


	/// <summary>
	/// A class property.
	/// </summary>
	partial class Property : ExtraProperties
	{
	
		private const Int32 _componentCountMinimum = 2;
		private Int32? _componentCount;
		
		private ElementComponentType _componentType;
		
		private String _description;
		
		private String _enumType;
		
		private Object _max;
		
		private Object _min;
		
		private String _name;
		
		private Object _noData;
		
		private static readonly Boolean _normalizedDefault = false;
		private Boolean? _normalized = _normalizedDefault;
		
		private static readonly Boolean _requiredDefault = false;
		private Boolean? _required = _requiredDefault;
		
		private String _semantic;
		
		private const ClassPropertyType _typeDefault = ClassPropertyType.SINGLE;
		private ClassPropertyType? _type = _typeDefault;
		
	
		protected override void SerializeProperties(Utf8JsonWriter writer)
		{
			base.SerializeProperties(writer);
			SerializeProperty(writer, "componentCount", _componentCount);
			SerializePropertyEnumSymbol<ElementComponentType>(writer, "componentType", _componentType);
			SerializeProperty(writer, "description", _description);
			SerializeProperty(writer, "enumType", _enumType);
			SerializeProperty(writer, "max", _max);
			SerializeProperty(writer, "min", _min);
			SerializeProperty(writer, "name", _name);
			SerializeProperty(writer, "noData", _noData);
			SerializeProperty(writer, "normalized", _normalized, _normalizedDefault);
			SerializeProperty(writer, "required", _required, _requiredDefault);
			SerializeProperty(writer, "semantic", _semantic);
			SerializePropertyEnumSymbol<ClassPropertyType>(writer, "type", _type, _typeDefault);
		}
	
		protected override void DeserializeProperty(string jsonPropertyName, ref Utf8JsonReader reader)
		{
			switch (jsonPropertyName)
			{
				case "componentCount": _componentCount = DeserializePropertyValue<Int32?>(ref reader); break;
				case "componentType": _componentType = DeserializePropertyValue<ElementComponentType>(ref reader); break;
				case "description": _description = DeserializePropertyValue<String>(ref reader); break;
				case "enumType": _enumType = DeserializePropertyValue<String>(ref reader); break;
				case "max": _max = DeserializePropertyValue<Object>(ref reader); break;
				case "min": _min = DeserializePropertyValue<Object>(ref reader); break;
				case "name": _name = DeserializePropertyValue<String>(ref reader); break;
				case "noData": _noData = DeserializePropertyValue<Object>(ref reader); break;
				case "normalized": _normalized = DeserializePropertyValue<Boolean?>(ref reader); break;
				case "required": _required = DeserializePropertyValue<Boolean?>(ref reader); break;
				case "semantic": _semantic = DeserializePropertyValue<String>(ref reader); break;
				case "type": _type = DeserializePropertyValue<ClassPropertyType>(ref reader); break;
				default: base.DeserializeProperty(jsonPropertyName,ref reader); break;
			}
		}
	
	}

	/// <summary>
	/// A class containing a set of properties.
	/// </summary>
	partial class Class : ExtraProperties
	{
	
		private String _description;
		
		private String _name;
		
		private Dictionary<String,Property> _properties;
		
	
		protected override void SerializeProperties(Utf8JsonWriter writer)
		{
			base.SerializeProperties(writer);
			SerializeProperty(writer, "description", _description);
			SerializeProperty(writer, "name", _name);
			SerializeProperty(writer, "properties", _properties);
		}
	
		protected override void DeserializeProperty(string jsonPropertyName, ref Utf8JsonReader reader)
		{
			switch (jsonPropertyName)
			{
				case "description": _description = DeserializePropertyValue<String>(ref reader); break;
				case "name": _name = DeserializePropertyValue<String>(ref reader); break;
				case "properties": DeserializePropertyDictionary<Property>(ref reader, _properties); break;
				default: base.DeserializeProperty(jsonPropertyName,ref reader); break;
			}
		}
	
	}

	/// <summary>
	/// An enum value.
	/// </summary>
	partial class Enumvalue : ExtraProperties
	{
	
		private String _description;
		
		private String _name;
		
		private Int32 _value;
		
	
		protected override void SerializeProperties(Utf8JsonWriter writer)
		{
			base.SerializeProperties(writer);
			SerializeProperty(writer, "description", _description);
			SerializeProperty(writer, "name", _name);
			SerializeProperty(writer, "value", _value);
		}
	
		protected override void DeserializeProperty(string jsonPropertyName, ref Utf8JsonReader reader)
		{
			switch (jsonPropertyName)
			{
				case "description": _description = DeserializePropertyValue<String>(ref reader); break;
				case "name": _name = DeserializePropertyValue<String>(ref reader); break;
				case "value": _value = DeserializePropertyValue<Int32>(ref reader); break;
				default: base.DeserializeProperty(jsonPropertyName,ref reader); break;
			}
		}
	
	}

	/// <summary>
	/// An object defining the values of an enum.
	/// </summary>
	partial class Enumeration : ExtraProperties
	{
	
		private String _description;
		
		private String _name;
		
		private const IntegerType _valueTypeDefault = IntegerType.UINT16;
		private IntegerType? _valueType = _valueTypeDefault;
		
		private const int _valuesMinItems = 1;
		private List<Enumvalue> _values;
		
	
		protected override void SerializeProperties(Utf8JsonWriter writer)
		{
			base.SerializeProperties(writer);
			SerializeProperty(writer, "description", _description);
			SerializeProperty(writer, "name", _name);
			SerializePropertyEnumSymbol<IntegerType>(writer, "valueType", _valueType, _valueTypeDefault);
			SerializeProperty(writer, "values", _values, _valuesMinItems);
		}
	
		protected override void DeserializeProperty(string jsonPropertyName, ref Utf8JsonReader reader)
		{
			switch (jsonPropertyName)
			{
				case "description": _description = DeserializePropertyValue<String>(ref reader); break;
				case "name": _name = DeserializePropertyValue<String>(ref reader); break;
				case "valueType": _valueType = DeserializePropertyValue<IntegerType>(ref reader); break;
				case "values": DeserializePropertyList<Enumvalue>(ref reader, _values); break;
				default: base.DeserializeProperty(jsonPropertyName,ref reader); break;
			}
		}
	
	}

	/// <summary>
	/// An object defining classes and enums.
	/// </summary>
	partial class Schema : ExtraProperties
	{
	
		private Dictionary<String,Class> _classes;
		
		private String _description;
		
		private Dictionary<String,Enumeration> _enums;
		
		private String _name;
		
		private String _version;
		
	
		protected override void SerializeProperties(Utf8JsonWriter writer)
		{
			base.SerializeProperties(writer);
			SerializeProperty(writer, "classes", _classes);
			SerializeProperty(writer, "description", _description);
			SerializeProperty(writer, "enums", _enums);
			SerializeProperty(writer, "name", _name);
			SerializeProperty(writer, "version", _version);
		}
	
		protected override void DeserializeProperty(string jsonPropertyName, ref Utf8JsonReader reader)
		{
			switch (jsonPropertyName)
			{
				case "classes": DeserializePropertyDictionary<Class>(ref reader, _classes); break;
				case "description": _description = DeserializePropertyValue<String>(ref reader); break;
				case "enums": DeserializePropertyDictionary<Enumeration>(ref reader, _enums); break;
				case "name": _name = DeserializePropertyValue<String>(ref reader); break;
				case "version": _version = DeserializePropertyValue<String>(ref reader); break;
				default: base.DeserializeProperty(jsonPropertyName,ref reader); break;
			}
		}
	
	}

	///// <summary>
	///// An array of binary property values.
	///// </summary>
	//partial class PropertyTableProperty : ExtraProperties
	//{
	
	//	private Int32? _arrayOffsetBufferView;
		
	//	private const OffsetBufferViewType _arrayOffsetTypeDefault = OffsetBufferViewType.UINT32;
	//	private OffsetBufferViewType? _arrayOffsetType = _arrayOffsetTypeDefault;
		
	//	private Int32 _bufferView;
		
	//	private Int32? _stringOffsetBufferView;
		
	//	private const OffsetBufferViewType _stringOffsetTypeDefault = OffsetBufferViewType.UINT32;
	//	private OffsetBufferViewType? _stringOffsetType = _stringOffsetTypeDefault;
		
	
	//	protected override void SerializeProperties(Utf8JsonWriter writer)
	//	{
	//		base.SerializeProperties(writer);
	//		SerializeProperty(writer, "arrayOffsetBufferView", _arrayOffsetBufferView);
	//		SerializePropertyEnumSymbol<OffsetBufferViewType>(writer, "arrayOffsetType", _arrayOffsetType, _arrayOffsetTypeDefault);
	//		SerializeProperty(writer, "bufferView", _bufferView);
	//		SerializeProperty(writer, "stringOffsetBufferView", _stringOffsetBufferView);
	//		SerializePropertyEnumSymbol<OffsetBufferViewType>(writer, "stringOffsetType", _stringOffsetType, _stringOffsetTypeDefault);
	//	}
	
	//	protected override void DeserializeProperty(string jsonPropertyName, ref Utf8JsonReader reader)
	//	{
	//		switch (jsonPropertyName)
	//		{
	//			case "arrayOffsetBufferView": _arrayOffsetBufferView = DeserializePropertyValue<Int32?>(ref reader); break;
	//			case "arrayOffsetType": _arrayOffsetType = DeserializePropertyValue<OffsetBufferViewType>(ref reader); break;
	//			case "bufferView": _bufferView = DeserializePropertyValue<Int32>(ref reader); break;
	//			case "stringOffsetBufferView": _stringOffsetBufferView = DeserializePropertyValue<Int32?>(ref reader); break;
	//			case "stringOffsetType": _stringOffsetType = DeserializePropertyValue<OffsetBufferViewType>(ref reader); break;
	//			default: base.DeserializeProperty(jsonPropertyName,ref reader); break;
	//		}
	//	}
	
	//}

	/// <summary>
	/// Features conforming to a class, organized as property values stored in columnar arrays.
	/// </summary>
	//partial class PropertyTable : ExtraProperties
	//{
	
	//	private String _class;
		
	//	private const Int32 _countMinimum = 1;
	//	private Int32 _count;
		
	//	private String _name;
		
	//	private Dictionary<String,PropertyTableProperty> _properties;
		
	
	//	protected override void SerializeProperties(Utf8JsonWriter writer)
	//	{
	//		base.SerializeProperties(writer);
	//		SerializeProperty(writer, "class", _class);
	//		SerializeProperty(writer, "count", _count);
	//		SerializeProperty(writer, "name", _name);
	//		SerializeProperty(writer, "properties", _properties);
	//	}
	
	//	protected override void DeserializeProperty(string jsonPropertyName, ref Utf8JsonReader reader)
	//	{
	//		switch (jsonPropertyName)
	//		{
	//			case "class": _class = DeserializePropertyValue<String>(ref reader); break;
	//			case "count": _count = DeserializePropertyValue<Int32>(ref reader); break;
	//			case "name": _name = DeserializePropertyValue<String>(ref reader); break;
	//			case "properties": DeserializePropertyDictionary<PropertyTableProperty>(ref reader, _properties); break;
	//			default: base.DeserializeProperty(jsonPropertyName,ref reader); break;
	//		}
	//	}
	
	//}

	/// <summary>
	/// Features conforming to a class, organized as property values stored in texture channels.
	/// </summary>
	partial class PropertyTexture : TextureInfo
	{
	
		private String _class;
		
		private String _name;
		
		private Dictionary<String,List<Int32>> _properties;
		
	
		protected override void SerializeProperties(Utf8JsonWriter writer)
		{
			base.SerializeProperties(writer);
			SerializeProperty(writer, "class", _class);
			SerializeProperty(writer, "name", _name);
			SerializeProperty(writer, "properties", _properties);
		}
	
		protected override void DeserializeProperty(string jsonPropertyName, ref Utf8JsonReader reader)
		{
			switch (jsonPropertyName)
			{
				case "class": _class = DeserializePropertyValue<String>(ref reader); break;
				case "name": _name = DeserializePropertyValue<String>(ref reader); break;
				case "properties": DeserializePropertyDictionary<List<Int32>>(ref reader, _properties); break;
				default: base.DeserializeProperty(jsonPropertyName,ref reader); break;
			}
		}
	
	}

	/// <summary>
	/// glTF extension that assigns properties to features in a model.
	/// </summary>
	partial class ModelExtMeshFeatures : ExtraProperties
	{
	
		private const int _propertyTablesMinItems = 1;
		private List<PropertyTable> _propertyTables;
		
		private const int _propertyTexturesMinItems = 1;
		private List<PropertyTexture> _propertyTextures;
		
		private Schema _schema;
		
		private String _schemaUri;
		
	
		protected override void SerializeProperties(Utf8JsonWriter writer)
		{
			base.SerializeProperties(writer);
			SerializeProperty(writer, "propertyTables", _propertyTables, _propertyTablesMinItems);
			SerializeProperty(writer, "propertyTextures", _propertyTextures, _propertyTexturesMinItems);
			SerializePropertyObject(writer, "schema", _schema);
			SerializeProperty(writer, "schemaUri", _schemaUri);
		}
	
		protected override void DeserializeProperty(string jsonPropertyName, ref Utf8JsonReader reader)
		{
			switch (jsonPropertyName)
			{
				case "propertyTables": DeserializePropertyList<PropertyTable>(ref reader, _propertyTables); break;
				case "propertyTextures": DeserializePropertyList<PropertyTexture>(ref reader, _propertyTextures); break;
				case "schema": _schema = DeserializePropertyValue<Schema>(ref reader); break;
				case "schemaUri": _schemaUri = DeserializePropertyValue<String>(ref reader); break;
				default: base.DeserializeProperty(jsonPropertyName,ref reader); break;
			}
		}
	
	}

}
