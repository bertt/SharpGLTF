// <auto-generated/>

//------------------------------------------------------------------------------------------------
//      This file has been programatically generated; DONÂ´T EDIT!
//------------------------------------------------------------------------------------------------

#pragma warning disable SA1001
#pragma warning disable SA1027
#pragma warning disable SA1028
#pragma warning disable SA1121
#pragma warning disable SA1205
#pragma warning disable SA1309
#pragma warning disable SA1402
#pragma warning disable SA1505
#pragma warning disable SA1507
#pragma warning disable SA1508
#pragma warning disable SA1652

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Numerics;
using System.Text.Json;

using JSONREADER = System.Text.Json.Utf8JsonReader;
using JSONWRITER = System.Text.Json.Utf8JsonWriter;
using FIELDINFO = SharpGLTF.Reflection.FieldInfo;


namespace SharpGLTF.Schema2
{
	using Collections;

	/// <summary>
	/// The padding around a voxel grid. Specifies how many rows of attribute data come from neighboring grids in each dimension.
	/// </summary>
	#if NET6_0_OR_GREATER
	[System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembers(System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.NonPublicConstructors | System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.PublicConstructors)]
	#endif
	[global::System.CodeDom.Compiler.GeneratedCodeAttribute("SharpGLTF.CodeGen", "1.0.0.0")]
	partial class Padding : ExtraProperties
	{
	
		#region reflection
	
		public new const string SCHEMANAME = "padding";
		protected override string GetSchemaName() => SCHEMANAME;
	
		protected override IEnumerable<string> ReflectFieldsNames()
		{
			yield return "after";
			yield return "before";
			foreach(var f in base.ReflectFieldsNames()) yield return f;
		}
		protected override bool TryReflectField(string name, out FIELDINFO value)
		{
			switch(name)
			{
				case "after": value = FIELDINFO.From("after",this, instance => instance._after); return true;
				case "before": value = FIELDINFO.From("before",this, instance => instance._before); return true;
				default: return base.TryReflectField(name, out value);
			}
		}
	
		#endregion
	
		#region data
	
		private const int _afterMinItems = 3;
		private const int _afterMaxItems = 3;
		private List<Int32> _after;
		
		private const int _beforeMinItems = 3;
		private const int _beforeMaxItems = 3;
		private List<Int32> _before;
		
		#endregion
	
		#region serialization
	
		protected override void SerializeProperties(JSONWRITER writer)
		{
			base.SerializeProperties(writer);
			SerializeProperty(writer, "after", _after, _afterMinItems);
			SerializeProperty(writer, "before", _before, _beforeMinItems);
		}
	
		protected override void DeserializeProperty(string jsonPropertyName, ref JSONREADER reader)
		{
			switch (jsonPropertyName)
			{
				case "after": DeserializePropertyList<Padding, Int32>(ref reader, this, _after); break;
				case "before": DeserializePropertyList<Padding, Int32>(ref reader, this, _before); break;
				default: base.DeserializeProperty(jsonPropertyName,ref reader); break;
			}
		}
	
		#endregion
	
	}

	/// <summary>
	/// `EXT_primitive_voxels` extension for a primitive in a glTF model to indicate voxel-based volumetric data
	/// </summary>
	#if NET6_0_OR_GREATER
	[System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembers(System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.NonPublicConstructors | System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.PublicConstructors)]
	#endif
	[global::System.CodeDom.Compiler.GeneratedCodeAttribute("SharpGLTF.CodeGen", "1.0.0.0")]
	partial class EXT_primitive_voxelsglTFMeshPrimitiveextension : ExtraProperties
	{
	
		#region reflection
	
		public new const string SCHEMANAME = "EXT_primitive_voxels";
		protected override string GetSchemaName() => SCHEMANAME;
	
		protected override IEnumerable<string> ReflectFieldsNames()
		{
			yield return "dimensions";
			yield return "noData";
			yield return "padding";
			yield return "shape";
			foreach(var f in base.ReflectFieldsNames()) yield return f;
		}
		protected override bool TryReflectField(string name, out FIELDINFO value)
		{
			switch(name)
			{
				case "dimensions": value = FIELDINFO.From("dimensions",this, instance => instance._dimensions); return true;
				case "noData": value = FIELDINFO.From("noData",this, instance => instance._noData); return true;
				case "padding": value = FIELDINFO.From("padding",this, instance => instance._padding); return true;
				case "shape": value = FIELDINFO.From("shape",this, instance => instance._shape); return true;
				default: return base.TryReflectField(name, out value);
			}
		}
	
		#endregion
	
		#region data
	
		private const int _dimensionsMinItems = 3;
		private const int _dimensionsMaxItems = 3;
		private List<Int32> _dimensions;
		
		private Dictionary<String,List<Double>> _noData;
		
		private Padding _padding;
		
		private Int32 _shape;
		
		#endregion
	
		#region serialization
	
		protected override void SerializeProperties(JSONWRITER writer)
		{
			base.SerializeProperties(writer);
			SerializeProperty(writer, "dimensions", _dimensions, _dimensionsMinItems);
			SerializeProperty(writer, "noData", _noData);
			SerializePropertyObject(writer, "padding", _padding);
			SerializeProperty(writer, "shape", _shape);
		}
	
		protected override void DeserializeProperty(string jsonPropertyName, ref JSONREADER reader)
		{
			switch (jsonPropertyName)
			{
				case "dimensions": DeserializePropertyList<EXT_primitive_voxelsglTFMeshPrimitiveextension, Int32>(ref reader, this, _dimensions); break;
				case "noData": DeserializePropertyDictionary<EXT_primitive_voxelsglTFMeshPrimitiveextension, List<Double>>(ref reader, this, _noData); break;
				case "padding": DeserializePropertyValue<EXT_primitive_voxelsglTFMeshPrimitiveextension, Padding>(ref reader, this, out _padding); break;
				case "shape": DeserializePropertyValue<EXT_primitive_voxelsglTFMeshPrimitiveextension, Int32>(ref reader, this, out _shape); break;
				default: base.DeserializeProperty(jsonPropertyName,ref reader); break;
			}
		}
	
		#endregion
	
	}

}
